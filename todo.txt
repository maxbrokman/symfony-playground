- Took a bit longer than expected, probably because some of this is more complex than it needs to be
- Loading everything into its own objects is the style I like to work in in PHP but I am aware that for this case
there could be some performance limitations
- If you fed this a large dataset you could probably see some big performance improvements by calculating mean, min, max
etc as you stream data in. Not sure how you would do outliers in this case.
- Would extract the PerformanceSet into an interface that can be tested against different implementations before doing this
refactor, tests for lower level stuff wouldn't be so useful

# 13th August
- Chronos is used as personal preference and makes any future manipulation useful for the addition of some small overhead
- Conversion between units has been moved into a twig filter, did not occur to me to originally do this as I am not an
experienced symfony dev
- Megabits conversion done as a static call as it's just a simple conversion, exists in a class to allow future fromKiloBytes
type calls etc
- Statistical calculations have been extracted from the PerformanceSet/PerformanceStatistics class into their own min, max,
mean, median, outlier group classes to give each piece a single calculation responsibility, mainly as a demonstrration.
I do not think that having these calculation done in the same place is a violation of SRP, in this case the
single responsibility / unit is performing basic statistical calculations over a set of data. In return for doing this
we now have quite a bit more code for little benefit in terms of compose-ability – we're unlikely to want to swap out our
maximum calculator – and little DRY-ness, these are not in general complex operations that need extraction.
